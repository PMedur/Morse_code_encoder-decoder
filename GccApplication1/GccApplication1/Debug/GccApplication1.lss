
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000610  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000610  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  00800062  00800062  000006a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012ab  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5b  00000000  00000000  00001ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b30  00000000  00000000  00002542  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00003074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c4  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd6  00000000  00000000  000039a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00004676  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <__vector_1>
   8:	0c 94 a7 01 	jmp	0x34e	; 0x34e <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 8a 02 	jmp	0x514	; 0x514 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 3e       	cpi	r26, 0xE6	; 230
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
  8a:	0c 94 06 03 	jmp	0x60c	; 0x60c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  92:	82 b3       	in	r24, 0x12	; 18
  94:	80 68       	ori	r24, 0x80	; 128
  96:	82 bb       	out	0x12, r24	; 18
  98:	00 c0       	rjmp	.+0      	; 0x9a <toggle_e+0x8>
  9a:	82 b3       	in	r24, 0x12	; 18
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	82 bb       	out	0x12, r24	; 18
  a0:	08 95       	ret

000000a2 <lcd_write>:
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
  a6:	66 23       	and	r22, r22
  a8:	21 f0       	breq	.+8      	; 0xb2 <lcd_write+0x10>
  aa:	82 b3       	in	r24, 0x12	; 18
  ac:	80 62       	ori	r24, 0x20	; 32
  ae:	82 bb       	out	0x12, r24	; 18
  b0:	03 c0       	rjmp	.+6      	; 0xb8 <lcd_write+0x16>
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	82 bb       	out	0x12, r24	; 18
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8f 7b       	andi	r24, 0xBF	; 191
  bc:	82 bb       	out	0x12, r24	; 18
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	87 bb       	out	0x17, r24	; 23
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	87 bb       	out	0x17, r24	; 23
  ca:	87 b3       	in	r24, 0x17	; 23
  cc:	80 64       	ori	r24, 0x40	; 64
  ce:	87 bb       	out	0x17, r24	; 23
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	87 bb       	out	0x17, r24	; 23
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	8f 77       	andi	r24, 0x7F	; 127
  da:	88 bb       	out	0x18, r24	; 24
  dc:	88 b3       	in	r24, 0x18	; 24
  de:	8f 7b       	andi	r24, 0xBF	; 191
  e0:	88 bb       	out	0x18, r24	; 24
  e2:	88 b3       	in	r24, 0x18	; 24
  e4:	8f 7d       	andi	r24, 0xDF	; 223
  e6:	88 bb       	out	0x18, r24	; 24
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	8f 7e       	andi	r24, 0xEF	; 239
  ec:	88 bb       	out	0x18, r24	; 24
  ee:	cc 23       	and	r28, r28
  f0:	1c f4       	brge	.+6      	; 0xf8 <lcd_write+0x56>
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	c6 ff       	sbrs	r28, 6
  fa:	03 c0       	rjmp	.+6      	; 0x102 <lcd_write+0x60>
  fc:	88 b3       	in	r24, 0x18	; 24
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	88 bb       	out	0x18, r24	; 24
 102:	c5 ff       	sbrs	r28, 5
 104:	03 c0       	rjmp	.+6      	; 0x10c <lcd_write+0x6a>
 106:	88 b3       	in	r24, 0x18	; 24
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	c4 ff       	sbrs	r28, 4
 10e:	03 c0       	rjmp	.+6      	; 0x116 <lcd_write+0x74>
 110:	88 b3       	in	r24, 0x18	; 24
 112:	80 61       	ori	r24, 0x10	; 16
 114:	88 bb       	out	0x18, r24	; 24
 116:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 11a:	88 b3       	in	r24, 0x18	; 24
 11c:	8f 77       	andi	r24, 0x7F	; 127
 11e:	88 bb       	out	0x18, r24	; 24
 120:	88 b3       	in	r24, 0x18	; 24
 122:	8f 7b       	andi	r24, 0xBF	; 191
 124:	88 bb       	out	0x18, r24	; 24
 126:	88 b3       	in	r24, 0x18	; 24
 128:	8f 7d       	andi	r24, 0xDF	; 223
 12a:	88 bb       	out	0x18, r24	; 24
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	8f 7e       	andi	r24, 0xEF	; 239
 130:	88 bb       	out	0x18, r24	; 24
 132:	c3 ff       	sbrs	r28, 3
 134:	03 c0       	rjmp	.+6      	; 0x13c <lcd_write+0x9a>
 136:	88 b3       	in	r24, 0x18	; 24
 138:	80 68       	ori	r24, 0x80	; 128
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	c2 ff       	sbrs	r28, 2
 13e:	03 c0       	rjmp	.+6      	; 0x146 <lcd_write+0xa4>
 140:	88 b3       	in	r24, 0x18	; 24
 142:	80 64       	ori	r24, 0x40	; 64
 144:	88 bb       	out	0x18, r24	; 24
 146:	c1 ff       	sbrs	r28, 1
 148:	03 c0       	rjmp	.+6      	; 0x150 <lcd_write+0xae>
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	80 62       	ori	r24, 0x20	; 32
 14e:	88 bb       	out	0x18, r24	; 24
 150:	c0 ff       	sbrs	r28, 0
 152:	03 c0       	rjmp	.+6      	; 0x15a <lcd_write+0xb8>
 154:	88 b3       	in	r24, 0x18	; 24
 156:	80 61       	ori	r24, 0x10	; 16
 158:	88 bb       	out	0x18, r24	; 24
 15a:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
 15e:	88 b3       	in	r24, 0x18	; 24
 160:	80 61       	ori	r24, 0x10	; 16
 162:	88 bb       	out	0x18, r24	; 24
 164:	88 b3       	in	r24, 0x18	; 24
 166:	80 62       	ori	r24, 0x20	; 32
 168:	88 bb       	out	0x18, r24	; 24
 16a:	88 b3       	in	r24, 0x18	; 24
 16c:	80 64       	ori	r24, 0x40	; 64
 16e:	88 bb       	out	0x18, r24	; 24
 170:	88 b3       	in	r24, 0x18	; 24
 172:	80 68       	ori	r24, 0x80	; 128
 174:	88 bb       	out	0x18, r24	; 24
 176:	cf 91       	pop	r28
 178:	08 95       	ret

0000017a <lcd_read>:
 17a:	88 23       	and	r24, r24
 17c:	21 f0       	breq	.+8      	; 0x186 <lcd_read+0xc>
 17e:	82 b3       	in	r24, 0x12	; 18
 180:	80 62       	ori	r24, 0x20	; 32
 182:	82 bb       	out	0x12, r24	; 18
 184:	03 c0       	rjmp	.+6      	; 0x18c <lcd_read+0x12>
 186:	82 b3       	in	r24, 0x12	; 18
 188:	8f 7d       	andi	r24, 0xDF	; 223
 18a:	82 bb       	out	0x12, r24	; 18
 18c:	82 b3       	in	r24, 0x12	; 18
 18e:	80 64       	ori	r24, 0x40	; 64
 190:	82 bb       	out	0x12, r24	; 18
 192:	87 b3       	in	r24, 0x17	; 23
 194:	8f 7e       	andi	r24, 0xEF	; 239
 196:	87 bb       	out	0x17, r24	; 23
 198:	87 b3       	in	r24, 0x17	; 23
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	87 bb       	out	0x17, r24	; 23
 19e:	87 b3       	in	r24, 0x17	; 23
 1a0:	8f 7b       	andi	r24, 0xBF	; 191
 1a2:	87 bb       	out	0x17, r24	; 23
 1a4:	87 b3       	in	r24, 0x17	; 23
 1a6:	8f 77       	andi	r24, 0x7F	; 127
 1a8:	87 bb       	out	0x17, r24	; 23
 1aa:	82 b3       	in	r24, 0x12	; 18
 1ac:	80 68       	ori	r24, 0x80	; 128
 1ae:	82 bb       	out	0x12, r24	; 18
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lcd_read+0x38>
 1b2:	b4 99       	sbic	0x16, 4	; 22
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <lcd_read+0x40>
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	01 c0       	rjmp	.+2      	; 0x1bc <lcd_read+0x42>
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	b5 99       	sbic	0x16, 5	; 22
 1be:	80 62       	ori	r24, 0x20	; 32
 1c0:	b6 99       	sbic	0x16, 6	; 22
 1c2:	80 64       	ori	r24, 0x40	; 64
 1c4:	b7 99       	sbic	0x16, 7	; 22
 1c6:	80 68       	ori	r24, 0x80	; 128
 1c8:	92 b3       	in	r25, 0x12	; 18
 1ca:	9f 77       	andi	r25, 0x7F	; 127
 1cc:	92 bb       	out	0x12, r25	; 18
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_read+0x56>
 1d0:	92 b3       	in	r25, 0x12	; 18
 1d2:	90 68       	ori	r25, 0x80	; 128
 1d4:	92 bb       	out	0x12, r25	; 18
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_read+0x5e>
 1d8:	b4 99       	sbic	0x16, 4	; 22
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	b5 99       	sbic	0x16, 5	; 22
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	b6 99       	sbic	0x16, 6	; 22
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	b7 99       	sbic	0x16, 7	; 22
 1e6:	88 60       	ori	r24, 0x08	; 8
 1e8:	92 b3       	in	r25, 0x12	; 18
 1ea:	9f 77       	andi	r25, 0x7F	; 127
 1ec:	92 bb       	out	0x12, r25	; 18
 1ee:	08 95       	ret

000001f0 <lcd_waitbusy>:
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_read>
 1f6:	88 23       	and	r24, r24
 1f8:	dc f3       	brlt	.-10     	; 0x1f0 <lcd_waitbusy>
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_waitbusy+0xe>
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 bd 00 	call	0x17a	; 0x17a <lcd_read>
 208:	08 95       	ret

0000020a <lcd_command>:
 20a:	cf 93       	push	r28
 20c:	c8 2f       	mov	r28, r24
 20e:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_waitbusy>
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	8c 2f       	mov	r24, r28
 216:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <lcd_data>:
 21e:	cf 93       	push	r28
 220:	c8 2f       	mov	r28, r24
 222:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <lcd_waitbusy>
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <lcd_clrscr>:
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
 238:	08 95       	ret

0000023a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 23a:	1f 93       	push	r17
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 242:	81 b3       	in	r24, 0x11	; 17
 244:	80 62       	ori	r24, 0x20	; 32
 246:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 248:	81 b3       	in	r24, 0x11	; 17
 24a:	80 64       	ori	r24, 0x40	; 64
 24c:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 24e:	81 b3       	in	r24, 0x11	; 17
 250:	80 68       	ori	r24, 0x80	; 128
 252:	81 bb       	out	0x11, r24	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 254:	87 b3       	in	r24, 0x17	; 23
 256:	80 61       	ori	r24, 0x10	; 16
 258:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 25a:	87 b3       	in	r24, 0x17	; 23
 25c:	80 62       	ori	r24, 0x20	; 32
 25e:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 260:	87 b3       	in	r24, 0x17	; 23
 262:	80 64       	ori	r24, 0x40	; 64
 264:	87 bb       	out	0x17, r24	; 23
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 266:	87 b3       	in	r24, 0x17	; 23
 268:	80 68       	ori	r24, 0x80	; 128
 26a:	87 bb       	out	0x17, r24	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 26c:	80 e3       	ldi	r24, 0x30	; 48
 26e:	93 e7       	ldi	r25, 0x73	; 115
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <lcd_init+0x36>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 274:	88 b3       	in	r24, 0x18	; 24
 276:	80 62       	ori	r24, 0x20	; 32
 278:	88 bb       	out	0x18, r24	; 24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 27a:	88 b3       	in	r24, 0x18	; 24
 27c:	80 61       	ori	r24, 0x10	; 16
 27e:	88 bb       	out	0x18, r24	; 24
    lcd_e_toggle();
 280:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 284:	80 ef       	ldi	r24, 0xF0	; 240
 286:	93 e2       	ldi	r25, 0x23	; 35
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <lcd_init+0x4e>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 28c:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 290:	c5 e7       	ldi	r28, 0x75	; 117
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	ce 01       	movw	r24, r28
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	f1 f7       	brne	.-4      	; 0x296 <lcd_init+0x5c>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 29a:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 29e:	ce 01       	movw	r24, r28
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_init+0x66>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 2a4:	88 b3       	in	r24, 0x18	; 24
 2a6:	8f 7e       	andi	r24, 0xEF	; 239
 2a8:	88 bb       	out	0x18, r24	; 24
    lcd_e_toggle();
 2aa:	0e 94 49 00 	call	0x92	; 0x92 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 2ae:	21 97       	sbiw	r28, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x74>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 2b2:	88 e2       	ldi	r24, 0x28	; 40
 2b4:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 2b8:	88 e0       	ldi	r24, 0x08	; 8
 2ba:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 2be:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 2c2:	86 e0       	ldi	r24, 0x06	; 6
 2c4:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 2c8:	81 2f       	mov	r24, r17
 2ca:	0e 94 05 01 	call	0x20a	; 0x20a <lcd_command>

}/* lcd_init */
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	08 95       	ret

000002d6 <debounce>:
{
	if (islower(c))
	c += ('A' - 'a');

	return CHAR_TO_MORSE[(int) c];
}
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	8f e3       	ldi	r24, 0x3F	; 63
 2da:	92 e0       	ldi	r25, 0x02	; 2
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <debounce+0x6>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <debounce+0x10>
 2e6:	00 00       	nop
 2e8:	80 ec       	ldi	r24, 0xC0	; 192
 2ea:	8a bf       	out	0x3a, r24	; 58
 2ec:	08 95       	ret

000002ee <__vector_1>:
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	4f 93       	push	r20
 2fe:	5f 93       	push	r21
 300:	6f 93       	push	r22
 302:	7f 93       	push	r23
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
 308:	af 93       	push	r26
 30a:	bf 93       	push	r27
 30c:	ef 93       	push	r30
 30e:	ff 93       	push	r31
 310:	87 b3       	in	r24, 0x17	; 23
 312:	88 60       	ori	r24, 0x08	; 8
 314:	87 bb       	out	0x17, r24	; 23
 316:	03 c0       	rjmp	.+6      	; 0x31e <__vector_1+0x30>
 318:	8b b3       	in	r24, 0x1b	; 27
 31a:	8d 7f       	andi	r24, 0xFD	; 253
 31c:	8b bb       	out	0x1b, r24	; 27
 31e:	82 9b       	sbis	0x10, 2	; 16
 320:	fb cf       	rjmp	.-10     	; 0x318 <__vector_1+0x2a>
 322:	8b b3       	in	r24, 0x1b	; 27
 324:	82 60       	ori	r24, 0x02	; 2
 326:	8b bb       	out	0x1b, r24	; 27
 328:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <debounce>
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	bf 91       	pop	r27
 332:	af 91       	pop	r26
 334:	9f 91       	pop	r25
 336:	8f 91       	pop	r24
 338:	7f 91       	pop	r23
 33a:	6f 91       	pop	r22
 33c:	5f 91       	pop	r21
 33e:	4f 91       	pop	r20
 340:	3f 91       	pop	r19
 342:	2f 91       	pop	r18
 344:	0f 90       	pop	r0
 346:	0f be       	out	0x3f, r0	; 63
 348:	0f 90       	pop	r0
 34a:	1f 90       	pop	r1
 34c:	18 95       	reti

0000034e <__vector_2>:
 34e:	1f 92       	push	r1
 350:	0f 92       	push	r0
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	0f 92       	push	r0
 356:	11 24       	eor	r1, r1
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	ef 93       	push	r30
 36e:	ff 93       	push	r31
 370:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <debounce>
 374:	ff 91       	pop	r31
 376:	ef 91       	pop	r30
 378:	bf 91       	pop	r27
 37a:	af 91       	pop	r26
 37c:	9f 91       	pop	r25
 37e:	8f 91       	pop	r24
 380:	7f 91       	pop	r23
 382:	6f 91       	pop	r22
 384:	5f 91       	pop	r21
 386:	4f 91       	pop	r20
 388:	3f 91       	pop	r19
 38a:	2f 91       	pop	r18
 38c:	0f 90       	pop	r0
 38e:	0f be       	out	0x3f, r0	; 63
 390:	0f 90       	pop	r0
 392:	1f 90       	pop	r1
 394:	18 95       	reti

00000396 <__vector_11>:
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	2f 93       	push	r18
 3a2:	3f 93       	push	r19
 3a4:	4f 93       	push	r20
 3a6:	5f 93       	push	r21
 3a8:	6f 93       	push	r22
 3aa:	7f 93       	push	r23
 3ac:	8f 93       	push	r24
 3ae:	9f 93       	push	r25
 3b0:	af 93       	push	r26
 3b2:	bf 93       	push	r27
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
 3b8:	8b b3       	in	r24, 0x1b	; 27
 3ba:	8e 7f       	andi	r24, 0xFE	; 254
 3bc:	8b bb       	out	0x1b, r24	; 27
 3be:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 3c2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 3c6:	8c b1       	in	r24, 0x0c	; 12
 3c8:	ea 59       	subi	r30, 0x9A	; 154
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	80 83       	st	Z, r24
 3ce:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 3d2:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 3d6:	ea 59       	subi	r30, 0x9A	; 154
 3d8:	ff 4f       	sbci	r31, 0xFF	; 255
 3da:	80 81       	ld	r24, Z
 3dc:	81 34       	cpi	r24, 0x41	; 65
 3de:	09 f0       	breq	.+2      	; 0x3e2 <__vector_11+0x4c>
 3e0:	3f c0       	rjmp	.+126    	; 0x460 <__stack+0x1>
 3e2:	87 b3       	in	r24, 0x17	; 23
 3e4:	81 60       	ori	r24, 0x01	; 1
 3e6:	87 bb       	out	0x17, r24	; 23
 3e8:	2f ef       	ldi	r18, 0xFF	; 255
 3ea:	8f eb       	ldi	r24, 0xBF	; 191
 3ec:	96 e0       	ldi	r25, 0x06	; 6
 3ee:	21 50       	subi	r18, 0x01	; 1
 3f0:	80 40       	sbci	r24, 0x00	; 0
 3f2:	90 40       	sbci	r25, 0x00	; 0
 3f4:	e1 f7       	brne	.-8      	; 0x3ee <__vector_11+0x58>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <__vector_11+0x62>
 3f8:	00 00       	nop
 3fa:	87 b3       	in	r24, 0x17	; 23
 3fc:	8e 7f       	andi	r24, 0xFE	; 254
 3fe:	87 bb       	out	0x17, r24	; 23
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	8f e3       	ldi	r24, 0x3F	; 63
 404:	92 e0       	ldi	r25, 0x02	; 2
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 410:	00 00       	nop
 412:	87 b3       	in	r24, 0x17	; 23
 414:	81 60       	ori	r24, 0x01	; 1
 416:	87 bb       	out	0x17, r24	; 23
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	8f e3       	ldi	r24, 0x3F	; 63
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	87 b3       	in	r24, 0x17	; 23
 42c:	8e 7f       	andi	r24, 0xFE	; 254
 42e:	87 bb       	out	0x17, r24	; 23
 430:	2f ef       	ldi	r18, 0xFF	; 255
 432:	8f e3       	ldi	r24, 0x3F	; 63
 434:	92 e0       	ldi	r25, 0x02	; 2
 436:	21 50       	subi	r18, 0x01	; 1
 438:	80 40       	sbci	r24, 0x00	; 0
 43a:	90 40       	sbci	r25, 0x00	; 0
 43c:	e1 f7       	brne	.-8      	; 0x436 <__DATA_REGION_LENGTH__+0x36>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 440:	00 00       	nop
 442:	87 b3       	in	r24, 0x17	; 23
 444:	81 60       	ori	r24, 0x01	; 1
 446:	87 bb       	out	0x17, r24	; 23
 448:	2f ef       	ldi	r18, 0xFF	; 255
 44a:	8f eb       	ldi	r24, 0xBF	; 191
 44c:	96 e0       	ldi	r25, 0x06	; 6
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	80 40       	sbci	r24, 0x00	; 0
 452:	90 40       	sbci	r25, 0x00	; 0
 454:	e1 f7       	brne	.-8      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 456:	00 c0       	rjmp	.+0      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 458:	00 00       	nop
 45a:	87 b3       	in	r24, 0x17	; 23
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	87 bb       	out	0x17, r24	; 23
 460:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clrscr>
 464:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 468:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 46c:	ea 59       	subi	r30, 0x9A	; 154
 46e:	ff 4f       	sbci	r31, 0xFF	; 255
 470:	80 81       	ld	r24, Z
 472:	0e 94 0f 01 	call	0x21e	; 0x21e <lcd_data>
 476:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <rx_count>
 47a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <rx_count+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <rx_count+0x1>
 484:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <rx_count>
 488:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 48c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 496:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 49a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 49e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 4a2:	80 38       	cpi	r24, 0x80	; 128
 4a4:	91 05       	cpc	r25, r1
 4a6:	20 f0       	brcs	.+8      	; 0x4b0 <__stack+0x51>
 4a8:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 4ac:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
 4b0:	ff 91       	pop	r31
 4b2:	ef 91       	pop	r30
 4b4:	bf 91       	pop	r27
 4b6:	af 91       	pop	r26
 4b8:	9f 91       	pop	r25
 4ba:	8f 91       	pop	r24
 4bc:	7f 91       	pop	r23
 4be:	6f 91       	pop	r22
 4c0:	5f 91       	pop	r21
 4c2:	4f 91       	pop	r20
 4c4:	3f 91       	pop	r19
 4c6:	2f 91       	pop	r18
 4c8:	0f 90       	pop	r0
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	0f 90       	pop	r0
 4ce:	1f 90       	pop	r1
 4d0:	18 95       	reti

000004d2 <main>:

int main(void)
{
	//LCD display 
	DDRD = _BV(4);
 4d2:	80 e1       	ldi	r24, 0x10	; 16
 4d4:	81 bb       	out	0x11, r24	; 17
	 
	 
	TCCR1A = _BV(COM1B1) | _BV(WGM10);
 4d6:	81 e2       	ldi	r24, 0x21	; 33
 4d8:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = _BV(WGM12) | _BV(CS11);
 4da:	ca e0       	ldi	r28, 0x0A	; 10
 4dc:	ce bd       	out	0x2e, r28	; 46
	OCR1B = 1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	99 bd       	out	0x29, r25	; 41
 4e4:	88 bd       	out	0x28, r24	; 40

	lcd_init(LCD_DISP_ON);
 4e6:	8c e0       	ldi	r24, 0x0C	; 12
 4e8:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_init>
	lcd_clrscr();
 4ec:	0e 94 19 01 	call	0x232	; 0x232 <lcd_clrscr>
	 
 	DDRA = 0xff;
 4f0:	8f ef       	ldi	r24, 0xFF	; 255
 4f2:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0xff;
 4f4:	8b bb       	out	0x1b, r24	; 27
	
	MCUCR = _BV(ISC11) | _BV(ISC01);
 4f6:	c5 bf       	out	0x35, r28	; 53
	GICR = _BV(INT0) | _BV(INT1);
 4f8:	80 ec       	ldi	r24, 0xC0	; 192
 4fa:	8b bf       	out	0x3b, r24	; 59
	
	//uart initialization
	uart_init(9600, 0);
 4fc:	40 e0       	ldi	r20, 0x00	; 0
 4fe:	60 e8       	ldi	r22, 0x80	; 128
 500:	75 e2       	ldi	r23, 0x25	; 37
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	0e 94 9c 02 	call	0x538	; 0x538 <uart_init>

	sei();
 50a:	78 94       	sei
	
    while (1) 
    {
		DDRB &= ~_BV(3);
 50c:	87 b3       	in	r24, 0x17	; 23
 50e:	87 7f       	andi	r24, 0xF7	; 247
 510:	87 bb       	out	0x17, r24	; 23
 512:	fc cf       	rjmp	.-8      	; 0x50c <main+0x3a>

00000514 <__vector_13>:
	}
	
}*/


ISR(USARTTXC_vect){
 514:	1f 92       	push	r1
 516:	0f 92       	push	r0
 518:	0f b6       	in	r0, 0x3f	; 63
 51a:	0f 92       	push	r0
 51c:	11 24       	eor	r1, r1
 51e:	8f 93       	push	r24
	PORTA &= 0xfd;
 520:	8b b3       	in	r24, 0x1b	; 27
 522:	8d 7f       	andi	r24, 0xFD	; 253
 524:	8b bb       	out	0x1b, r24	; 27
	uart_tx_busy = 1;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
 52c:	8f 91       	pop	r24
 52e:	0f 90       	pop	r0
 530:	0f be       	out	0x3f, r0	; 63
 532:	0f 90       	pop	r0
 534:	1f 90       	pop	r1
 536:	18 95       	reti

00000538 <uart_init>:

void uart_init(uint32_t baud,uint8_t high_speed){
	
	uint8_t speed = 16;
	
	if(high_speed != 0){
 538:	44 23       	and	r20, r20
 53a:	29 f0       	breq	.+10     	; 0x546 <uart_init+0xe>
		speed = 8;
		UCSRA |= 1 << U2X;
 53c:	2b b1       	in	r18, 0x0b	; 11
 53e:	22 60       	ori	r18, 0x02	; 2
 540:	2b b9       	out	0x0b, r18	; 11
void uart_init(uint32_t baud,uint8_t high_speed){
	
	uint8_t speed = 16;
	
	if(high_speed != 0){
		speed = 8;
 542:	a8 e0       	ldi	r26, 0x08	; 8
 544:	01 c0       	rjmp	.+2      	; 0x548 <uart_init+0x10>
}


void uart_init(uint32_t baud,uint8_t high_speed){
	
	uint8_t speed = 16;
 546:	a0 e1       	ldi	r26, 0x10	; 16
	if(high_speed != 0){
		speed = 8;
		UCSRA |= 1 << U2X;
	}
	
	baud = (F_CPU/(speed*baud)) - 1;
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	9b 01       	movw	r18, r22
 54c:	ac 01       	movw	r20, r24
 54e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__muluhisi3>
 552:	9b 01       	movw	r18, r22
 554:	ac 01       	movw	r20, r24
 556:	60 e0       	ldi	r22, 0x00	; 0
 558:	70 e8       	ldi	r23, 0x80	; 128
 55a:	80 e7       	ldi	r24, 0x70	; 112
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 ca 02 	call	0x594	; 0x594 <__udivmodsi4>
 562:	ba 01       	movw	r22, r20
 564:	a9 01       	movw	r20, r18
 566:	41 50       	subi	r20, 0x01	; 1
 568:	51 09       	sbc	r21, r1
 56a:	61 09       	sbc	r22, r1
 56c:	71 09       	sbc	r23, r1
	
	UBRRH = (baud & 0x0F00) >> 8;
 56e:	db 01       	movw	r26, r22
 570:	ca 01       	movw	r24, r20
 572:	88 27       	eor	r24, r24
 574:	9f 70       	andi	r25, 0x0F	; 15
 576:	aa 27       	eor	r26, r26
 578:	bb 27       	eor	r27, r27
 57a:	89 2f       	mov	r24, r25
 57c:	9a 2f       	mov	r25, r26
 57e:	ab 2f       	mov	r26, r27
 580:	bb 27       	eor	r27, r27
 582:	80 bd       	out	0x20, r24	; 32
	UBRRL = (baud & 0x00FF);
 584:	49 b9       	out	0x09, r20	; 9
	
	UCSRB |= (1 << TXEN) | (1 << RXEN) | (1 << TXCIE) | (1 << RXCIE);
 586:	8a b1       	in	r24, 0x0a	; 10
 588:	88 6d       	ori	r24, 0xD8	; 216
 58a:	8a b9       	out	0x0a, r24	; 10
	UCSRC &= ~_BV(URSEL);
 58c:	80 b5       	in	r24, 0x20	; 32
 58e:	8f 77       	andi	r24, 0x7F	; 127
 590:	80 bd       	out	0x20, r24	; 32
 592:	08 95       	ret

00000594 <__udivmodsi4>:
 594:	a1 e2       	ldi	r26, 0x21	; 33
 596:	1a 2e       	mov	r1, r26
 598:	aa 1b       	sub	r26, r26
 59a:	bb 1b       	sub	r27, r27
 59c:	fd 01       	movw	r30, r26
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <__udivmodsi4_ep>

000005a0 <__udivmodsi4_loop>:
 5a0:	aa 1f       	adc	r26, r26
 5a2:	bb 1f       	adc	r27, r27
 5a4:	ee 1f       	adc	r30, r30
 5a6:	ff 1f       	adc	r31, r31
 5a8:	a2 17       	cp	r26, r18
 5aa:	b3 07       	cpc	r27, r19
 5ac:	e4 07       	cpc	r30, r20
 5ae:	f5 07       	cpc	r31, r21
 5b0:	20 f0       	brcs	.+8      	; 0x5ba <__udivmodsi4_ep>
 5b2:	a2 1b       	sub	r26, r18
 5b4:	b3 0b       	sbc	r27, r19
 5b6:	e4 0b       	sbc	r30, r20
 5b8:	f5 0b       	sbc	r31, r21

000005ba <__udivmodsi4_ep>:
 5ba:	66 1f       	adc	r22, r22
 5bc:	77 1f       	adc	r23, r23
 5be:	88 1f       	adc	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	1a 94       	dec	r1
 5c4:	69 f7       	brne	.-38     	; 0x5a0 <__udivmodsi4_loop>
 5c6:	60 95       	com	r22
 5c8:	70 95       	com	r23
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	9b 01       	movw	r18, r22
 5d0:	ac 01       	movw	r20, r24
 5d2:	bd 01       	movw	r22, r26
 5d4:	cf 01       	movw	r24, r30
 5d6:	08 95       	ret

000005d8 <__muluhisi3>:
 5d8:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__umulhisi3>
 5dc:	a5 9f       	mul	r26, r21
 5de:	90 0d       	add	r25, r0
 5e0:	b4 9f       	mul	r27, r20
 5e2:	90 0d       	add	r25, r0
 5e4:	a4 9f       	mul	r26, r20
 5e6:	80 0d       	add	r24, r0
 5e8:	91 1d       	adc	r25, r1
 5ea:	11 24       	eor	r1, r1
 5ec:	08 95       	ret

000005ee <__umulhisi3>:
 5ee:	a2 9f       	mul	r26, r18
 5f0:	b0 01       	movw	r22, r0
 5f2:	b3 9f       	mul	r27, r19
 5f4:	c0 01       	movw	r24, r0
 5f6:	a3 9f       	mul	r26, r19
 5f8:	70 0d       	add	r23, r0
 5fa:	81 1d       	adc	r24, r1
 5fc:	11 24       	eor	r1, r1
 5fe:	91 1d       	adc	r25, r1
 600:	b2 9f       	mul	r27, r18
 602:	70 0d       	add	r23, r0
 604:	81 1d       	adc	r24, r1
 606:	11 24       	eor	r1, r1
 608:	91 1d       	adc	r25, r1
 60a:	08 95       	ret

0000060c <_exit>:
 60c:	f8 94       	cli

0000060e <__stop_program>:
 60e:	ff cf       	rjmp	.-2      	; 0x60e <__stop_program>
