
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000644  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005bc  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000246  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001008  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000343  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000062  00000000  00000000  000013af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001411  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 57 00 	call	0xae	; 0xae <main>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_11>:
#include <avr/interrupt.h>
#include <stdio.h>
#include <avr/io.h>
#include <stdlib.h>

ISR(USARTRXC_vect) {
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	PORTA |= 0x01;
  78:	8b b3       	in	r24, 0x1b	; 27
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	8b bb       	out	0x1b, r24	; 27
}
  7e:	8f 91       	pop	r24
  80:	0f 90       	pop	r0
  82:	0f be       	out	0x3f, r0	; 63
  84:	0f 90       	pop	r0
  86:	1f 90       	pop	r1
  88:	18 95       	reti

0000008a <USART_getc>:


unsigned char USART_getc( void )
{
	// Wait for data to be received
	while ( !(UCSRA & _BV(RXC)) );
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <USART_getc>
	// Get and return received data from buffer
	PORTA |= 0x01;
  8e:	8b b3       	in	r24, 0x1b	; 27
  90:	81 60       	ori	r24, 0x01	; 1
  92:	8b bb       	out	0x1b, r24	; 27
	return 0;
}
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	08 95       	ret

00000098 <UART_Init>:

void UART_Init(uint16_t v_baudRate_u16)
{
	
	UCSRA= 0x00;                 // Clear the UASRT status register
  98:	1b b8       	out	0x0b, r1	; 11
	UCSRB= (1<<RXEN) | (1<<RXCIE) | (1 << TXEN);     // Enable Receiver and Transmitter
  9a:	28 e9       	ldi	r18, 0x98	; 152
  9c:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<UCSZ1) | (1<<UCSZ0);   // Async-mode
  9e:	26 e0       	ldi	r18, 0x06	; 6
  a0:	20 bd       	out	0x20, r18	; 32
	
	UBRRL = v_baudRate_u16;
  a2:	89 b9       	out	0x09, r24	; 9
	UBRRH = (v_baudRate_u16 >> 8);
  a4:	90 bd       	out	0x20, r25	; 32
	PORTA |= 0x04;
  a6:	8b b3       	in	r24, 0x1b	; 27
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	8b bb       	out	0x1b, r24	; 27
  ac:	08 95       	ret

000000ae <main>:


int main(void)
{
	
	DDRA = 0xff;
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00;
  b2:	1b ba       	out	0x1b, r1	; 27
	UART_Init(3);
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	0e 94 4c 00 	call	0x98	; 0x98 <UART_Init>
	sei();
  bc:	78 94       	sei
    while (1) 
    {
		USART_getc();
  be:	0e 94 45 00 	call	0x8a	; 0x8a <USART_getc>
  c2:	fd cf       	rjmp	.-6      	; 0xbe <main+0x10>

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
